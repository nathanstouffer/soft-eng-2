model IteratorPattern

class Iterator
attributes
operations
  next()
    begin
    end

  hasNext(): Boolean
    begin
      result := true
    end

end

class Container < Iterator
attributes
operations
  set()
    begin
    end

  get()

  createIterator(): Iterator
    begin
      result := self.iter;
    end

  next()
  hasNext(): Boolean
end

class Client
attributes
operations
  populateContainer()
    begin
      for c in self.containers do
        c.set();
      end
    end

  traverse()
    begin
      for iter in self.iterators do
        iter.hasNext();
        iter.next();
      end
    end
end

association client_container between
  Client[0] role client2
  Container[0..*] role containers
end

association client_iterator between
  Client[0] role client1
  Iterator[0..*] role iterators
end

association container_iterator between
  Container[1] role cont
  Iterator[1] role iter
end
